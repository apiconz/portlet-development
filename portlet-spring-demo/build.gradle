// Establecemos los plugins necesarios segun se requiera
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "war"

// Modificamos algunas propiedades del proyecto
version = "1.0"
description = "Aplicacion de demostracion del uso de spring portlet mvc con gradle y maven"

compileJava {
	sourceCompatibility = 1.5
	targetCompatibility = 1.5
}

configurations {
	provided
}

sourceSets {
	main.compileClasspath += configurations.provided
	test.compileClasspath += configurations.provided
	test.runtimeClasspath += configurations.provided	
}

eclipse.classpath.plusConfigurations += configurations.provided

// Colocamos los repositorios de maven a ser usados
// Debemos tener previamente configurado nuestro M2_HOME y PATH
repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile("org.springframework:spring-core:3.0.3.RELEASE")
	compile("org.springframework:spring-webmvc-portlet:3.0.3.RELEASE")
	compile("org.springframework:spring-aop:3.0.3.RELEASE")
	compile("org.springframework:spring-expression:3.0.3.RELEASE")
	compile("org.springframework:spring-jdbc:3.0.3.RELEASE")
	
	compile("commons-configuration:commons-configuration:1.6")
	compile("commons-logging:commons-logging:1.1.1")
	compile("commons-lang:commons-lang:2.5")
	compile("cglib:cglib:2.1_3")
	
	provided("javax.servlet:servlet-api:2.5")
	provided("javax.servlet:jstl:1.1.2")
	provided("taglibs:standard:1.1.2")
	provided("javax.portlet:portlet-api:2.0")
}

war {
	// Puedo sobreescribir alguna propiedad al momento de generar el war
	// si deseo
	
	baseName = "PortletSpringDemo"
}

// Generamos un wrapper para no ser necesario tener instalado todo el gradle
// y asi cada proyecto tenga sus scripts gradlew.sh o gradlew.bat para realizar
// las tareas necesarias
task wrapper(type: Wrapper) {
	gradleVersion = "1.7"
}